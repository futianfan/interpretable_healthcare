LEARNING RULE LIST via OBJECTIVE Captured Symmetry Map
min(objective): 0.13583 -> 0.13561, length: 1, cache size: 5
min(objective): 0.13561 -> 0.13538, length: 1, cache size: 45
min(objective): 0.13538 -> 0.13523, length: 2, cache size: 1143
min(objective): 0.13523 -> 0.13501, length: 2, cache size: 1222
min(objective): 0.13501 -> 0.13501, length: 2, cache size: 1893
min(objective): 0.13501 -> 0.13486, length: 3, cache size: 2273
min(objective): 0.13486 -> 0.13486, length: 3, cache size: 2278
min(objective): 0.13486 -> 0.13464, length: 3, cache size: 2352
min(objective): 0.13464 -> 0.13449, length: 4, cache size: 3399
min(objective): 0.13449 -> 0.13442, length: 4, cache size: 3627
min(objective): 0.13442 -> 0.13434, length: 4, cache size: 3668
min(objective): 0.13434 -> 0.13419, length: 5, cache size: 4508
min(objective): 0.13419 -> 0.13412, length: 5, cache size: 4736
min(objective): 0.13412 -> 0.13404, length: 5, cache size: 4777
min(objective): 0.13404 -> 0.13397, length: 6, cache size: 5612
min(objective): 0.13397 -> 0.13389, length: 7, cache size: 5636
min(objective): 0.13389 -> 0.13382, length: 8, cache size: 5659
min(objective): 0.13382 -> 0.13375, length: 9, cache size: 5681
min(objective): 0.13375 -> 0.13367, length: 11, cache size: 5770
min(objective): 0.13367 -> 0.13367, length: 7, cache size: 6724
min(objective): 0.13367 -> 0.13360, length: 7, cache size: 7020
min(objective): 0.13360 -> 0.13345, length: 8, cache size: 7811
min(objective): 0.13345 -> 0.13345, length: 8, cache size: 7961
min(objective): 0.13345 -> 0.13337, length: 8, cache size: 8106
min(objective): 0.13337 -> 0.13322, length: 9, cache size: 8892
min(objective): 0.13322 -> 0.13315, length: 9, cache size: 9187
min(objective): 0.13315 -> 0.13315, length: 9, cache size: 9324
min(objective): 0.13315 -> 0.13300, length: 10, cache size: 9973
min(objective): 0.13300 -> 0.13293, length: 10, cache size: 10267
min(objective): 0.13293 -> 0.13278, length: 11, cache size: 11049
min(objective): 0.13278 -> 0.13270, length: 11, cache size: 11627
min(objective): 0.13270 -> 0.13255, length: 12, cache size: 12125
min(objective): 0.13255 -> 0.13255, length: 12, cache size: 12937
min(objective): 0.13255 -> 0.13241, length: 13, cache size: 13200
min(objective): 0.13241 -> 0.13226, length: 14, cache size: 14274
min(objective): 0.13226 -> 0.13211, length: 15, cache size: 15347
min(objective): 0.13211 -> 0.13196, length: 16, cache size: 16417
min(objective): 0.13196 -> 0.13181, length: 17, cache size: 17485
min(objective): 0.13181 -> 0.13174, length: 18, cache size: 18550
min(objective): 0.13174 -> 0.13166, length: 18, cache size: 18694
min(objective): 0.13166 -> 0.13159, length: 19, cache size: 19611
min(objective): 0.13159 -> 0.13159, length: 19, cache size: 19944
min(objective): 0.13159 -> 0.13151, length: 20, cache size: 20670
min(objective): 0.13151 -> 0.13144, length: 21, cache size: 21728
min(objective): 0.13144 -> 0.13136, length: 22, cache size: 22785
min(objective): 0.13136 -> 0.13136, length: 22, cache size: 23199
min(objective): 0.13136 -> 0.13129, length: 23, cache size: 23841
min(objective): 0.13129 -> 0.13121, length: 24, cache size: 24896
min(objective): 0.13121 -> 0.13121, length: 24, cache size: 24900
min(objective): 0.13121 -> 0.13114, length: 25, cache size: 25949
min(objective): 0.13114 -> 0.13114, length: 25, cache size: 26361
min(objective): 0.13114 -> 0.13107, length: 26, cache size: 26994
min(objective): 0.13107 -> 0.13099, length: 27, cache size: 28031
min(objective): 0.13099 -> 0.13099, length: 27, cache size: 28035
min(objective): 0.13099 -> 0.13092, length: 28, cache size: 29067
min(objective): 0.13092 -> 0.13084, length: 29, cache size: 30100
min(objective): 0.13084 -> 0.13077, length: 30, cache size: 31132
min(objective): 0.13077 -> 0.13069, length: 31, cache size: 32163
min(objective): 0.13069 -> 0.13062, length: 32, cache size: 33193
min(objective): 0.13062 -> 0.13054, length: 33, cache size: 34222
min(objective): 0.13054 -> 0.13047, length: 34, cache size: 35250
min(objective): 0.13047 -> 0.13047, length: 34, cache size: 35522
min(objective): 0.13047 -> 0.13040, length: 35, cache size: 36277
min(objective): 0.13040 -> 0.13032, length: 36, cache size: 37303
min(objective): 0.13032 -> 0.13025, length: 37, cache size: 38328
min(objective): 0.13025 -> 0.13025, length: 37, cache size: 38600
min(objective): 0.13025 -> 0.13017, length: 38, cache size: 39352
min(objective): 0.13017 -> 0.13010, length: 39, cache size: 40375
min(objective): 0.13010 -> 0.13002, length: 40, cache size: 41397
min(objective): 0.13002 -> 0.12995, length: 41, cache size: 42418
min(objective): 0.12995 -> 0.12988, length: 42, cache size: 43438
min(objective): 0.12988 -> 0.12980, length: 43, cache size: 44457
min(objective): 0.12980 -> 0.12973, length: 44, cache size: 45475
min(objective): 0.12973 -> 0.12965, length: 45, cache size: 46492
min(objective): 0.12965 -> 0.12958, length: 47, cache size: 49533
min(objective): 0.12958 -> 0.12950, length: 49, cache size: 50228
min(objective): 0.12950 -> 0.12943, length: 51, cache size: 50967
min(objective): 0.12943 -> 0.12935, length: 53, cache size: 51010
Exited because max number of nodes in the tree was reached
TREE mem usage: 0
PMAP mem usage: 0
QUEUE mem usage: 0
Deleting queue elements and corresponding nodes in the cache,since they may not be reachable by the tree's destructor

minimum objective: 0.1293540539
minimum lower bound in queue: 0.0000000030

final num_nodes: 97640
final num_evaluated: 67545
final min_objective: 0.12935
final accuracy: 0.87065

OPTIMAL RULE LIST
if ({F_40=yes,F_1705=yes}) then ({label:Yes})
else if ({F_768=yes,F_1850=yes}) then ({label:Yes})
else if ({F_84=yes}) then ({label:Yes})
else if ({F_624=yes,F_1224=yes}) then ({label:Yes})
else if ({F_225=yes}) then ({label:Yes})
else if ({F_1366=yes,F_1799=yes}) then ({label:Yes})
else if ({F_732=yes,F_768=yes}) then ({label:Yes})
else if ({F_792=yes,F_805=yes}) then ({label:Yes})
else if ({F_392=yes,F_1513=yes}) then ({label:Yes})
else if ({F_286=yes,F_1463=yes}) then ({label:Yes})
else if ({F_644=yes,F_1463=yes}) then ({label:Yes})
else if ({F_953=yes,F_1513=yes}) then ({label:Yes})
else if ({F_1463=yes,F_1850=yes}) then ({label:Yes})
else if ({F_1224=yes,F_1799=yes}) then ({label:Yes})
else if ({F_812=yes,F_1705=yes}) then ({label:Yes})
else if ({F_147=yes,F_1850=yes}) then ({label:Yes})
else if ({F_109=yes,F_853=yes}) then ({label:Yes})
else if ({F_129=yes,F_732=yes}) then ({label:Yes})
else if ({F_321=yes,F_1799=yes}) then ({label:Yes})
else if ({F_1257=yes,F_1705=yes}) then ({label:Yes})
else if ({F_812=yes,F_1803=yes}) then ({label:Yes})
else if ({F_1003=yes,F_1224=yes}) then ({label:Yes})
else if ({F_1245=yes,F_1803=yes}) then ({label:Yes})
else if ({F_732=yes,F_1487=yes}) then ({label:Yes})
else if ({F_392=yes,F_1151=yes}) then ({label:Yes})
else if ({F_805=yes,F_1705=yes}) then ({label:Yes})
else if ({F_40=yes,F_286=yes}) then ({label:Yes})
else if ({F_792=yes,F_1513=yes}) then ({label:Yes})
else if ({F_792=yes,F_1463=yes}) then ({label:Yes})
else if ({F_792=yes,F_953=yes}) then ({label:Yes})
else if ({F_732=yes,F_1799=yes}) then ({label:Yes})
else if ({F_624=yes,F_1799=yes}) then ({label:Yes})
else if ({F_624=yes,F_732=yes}) then ({label:Yes})
else if ({F_286=yes,F_1151=yes}) then ({label:Yes})
else if ({F_530=yes,F_1850=yes}) then ({label:Yes})
else if ({F_530=yes,F_1705=yes}) then ({label:Yes})
else if ({F_286=yes,F_1003=yes}) then ({label:Yes})
else if ({F_530=yes,F_1513=yes}) then ({label:Yes})
else if ({F_530=yes,F_792=yes}) then ({label:Yes})
else if ({F_286=yes,F_1799=yes}) then ({label:Yes})
else if ({F_286=yes,F_644=yes}) then ({label:Yes})
else if ({F_214=yes,F_1513=yes}) then ({label:Yes})
else if ({F_63=yes,F_1799=yes}) then ({label:Yes})
else if ({F_40=yes,F_392=yes}) then ({label:Yes})
else if ({F_40=yes,F_109=yes}) then ({label:Yes})
else if ({F_1803=yes}) then ({label:No})
else if ({F_129=yes,F_1184=yes}) then ({label:Yes})
else if ({F_1793=yes}) then ({label:No})
else if ({F_1184=yes,F_1219=yes}) then ({label:Yes})
else if ({F_1502=yes}) then ({label:No})
else if ({F_1024=yes,F_1219=yes}) then ({label:Yes})
else if ({F_1487=yes}) then ({label:No})
else if ({F_91=yes,F_655=yes}) then ({label:Yes})
else ({label:No})

writing optimal rule list to: ../logs/for-training_selected_feature-curious_obj-with_captured_symmetry_map-no_minor-removed=none-max_num_nodes=100000-c=0.0000000-v=0-f=1000-opt.txt

final total time: 143.036576

delete rules
delete labels
tree destructors
